// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Cronjob;
//
//    var postcodeGeo = PostcodeGeo.FromJson(jsonString);

namespace Cronjob
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PostcodeGeo
    {
        [JsonProperty("postcode", NullValueHandling = NullValueHandling.Ignore)]
        public int? Postcode { get; set; }

        [JsonProperty("locality", NullValueHandling = NullValueHandling.Ignore)]
        public string Locality { get; set; }

        [JsonProperty("State", NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }

        [JsonProperty("long", NullValueHandling = NullValueHandling.Ignore)]
        public string Long { get; set; }

        [JsonProperty("lat", NullValueHandling = NullValueHandling.Ignore)]
        public string Lat { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("dc", NullValueHandling = NullValueHandling.Ignore)]
        public string Dc { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class PostcodeGeo
    {
        public static List<PostcodeGeo> FromJson(string json) => JsonConvert.DeserializeObject<List<PostcodeGeo>>(json, Cronjob.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<PostcodeGeo> self) => JsonConvert.SerializeObject(self, Cronjob.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
